import org.gradle.internal.os.OperatingSystem

task startService {
    group 'service'
    description 'Starts service, if installed'

    doLast {
        if (OperatingSystem.current().isLinux()) {
            exec { commandLine 'systemctl', 'start', 'amiami.service' }
        } else {
            logger.warn 'Unsupported OS'
        }
    }
}

task stopService {
    group 'service'
    description 'Stops service, if installed'

    doLast {
        if (OperatingSystem.current().isLinux()) {
            exec { commandLine 'systemctl', 'stop', 'amiami.service' }
        } else {
            logger.warn 'Unsupported OS'
        }
    }
}

task installService {
    group 'service'
    description 'Builds and installs service'
    dependsOn bootJar, stopService
    tasks.findByName('stopService').mustRunAfter 'bootJar'

    // TODO Устанавливать сервис как сервис пользователя, а не системный
    doLast {
        if (OperatingSystem.current().isLinux()) {
            def installPath = '/var/amiami'
            def targetExecutable = installPath + '/app.jar'
            def jar = tasks.findByName('bootJar').archivePath
            def systemd = """[Unit]
Description=Amiami pre-owned web scrapper
After=syslog.target

[Service]
ExecStart=$targetExecutable
Restart=always
RestartSec=3

[Install]
WantedBy=multi-user.target
"""
            exec { commandLine 'chmod', '+x', jar }
            exec { commandLine 'mkdir', installPath }
            exec { commandLine 'cp', jar, targetExecutable }
            exec { commandLine 'echo', "'$systemd'", '>', '/etc/systemd/system/amiami.service' }
            exec { commandLine 'systemctl', 'enable amiami.service' }
            exec { commandLine 'systemctl', 'daemon-reload' }
            exec { commandLine 'systemctl', 'restart', 'amiami.service' }
        } else {
            println 'Unsupported OS'
        }
    }
}
