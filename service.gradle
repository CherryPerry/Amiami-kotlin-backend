import org.gradle.internal.os.OperatingSystem

import java.nio.charset.StandardCharsets
import java.nio.file.Files
import java.nio.file.Paths
import java.nio.file.attribute.PosixFilePermission

task startService {
    group 'service'
    description 'Starts service, if installed'

    doLast {
        if (OperatingSystem.current().isLinux()) {
            exec { commandLine 'systemctl', 'start', 'amiami.service' }
        } else {
            logger.warn 'Unsupported OS'
        }
    }
}

task stopService {
    group 'service'
    description 'Stops service, if installed'

    doLast {
        if (OperatingSystem.current().isLinux()) {
            exec { commandLine 'systemctl', 'stop', 'amiami.service' }
        } else {
            logger.warn 'Unsupported OS'
        }
    }
}

task installService {
    group 'service'
    description 'Builds and installs service'
    dependsOn bootJar, stopService
    tasks.findByName('stopService').mustRunAfter 'bootJar'

    // TODO Устанавливать сервис как сервис пользователя, а не системный
    doLast {
        if (OperatingSystem.current().isLinux()) {
            def installPath = '/var/amiami'
            def targetExecutable = installPath + '/app.jar'
            def jar = tasks.findByName('bootJar').archivePath
            def systemd = """[Unit]
Description=Amiami pre-owned web scrapper
After=syslog.target

[Service]
ExecStart=$targetExecutable
Restart=always
RestartSec=3

[Install]
WantedBy=multi-user.target
"""
            def jarPath = Paths.get(jar)
            def permissions = Files.getPosixFilePermissions(jarPath)
            permissions.add(PosixFilePermission.OWNER_EXECUTE)
            permissions.add(PosixFilePermission.GROUP_EXECUTE)
            permissions.add(PosixFilePermission.OTHERS_EXECUTE)
            Files.setPosixFilePermissions(jarPath, permissions)
            Files.createDirectories(Paths.get(installPath))
            Files.copy(jarPath, Paths.get(targetExecutable))
            Files.write(Paths.get('/etc/systemd/system/amiami.service'), systemd.getBytes(StandardCharsets.UTF_8))
            exec { commandLine 'systemctl', 'daemon-reload' }
            exec { commandLine 'systemctl', 'enable amiami.service' }
            exec { commandLine 'systemctl', 'restart', 'amiami.service' }
        } else {
            println 'Unsupported OS'
        }
    }
}
